{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/comments": {
    "description": "Retrieves an array of all comments",
    "queries": [],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 1,
          "author": "butter_bridge",
          "article_id": 9,
          "votes": 16,
          "created_at": "2025-01-30T00:20:03.908Z",
          "body": "This is an insightful comment."
        },
        {
          "comment_id": 2,
          "author": "icellusedkars",
          "article_id": 1,
          "votes": 5,
          "created_at": "2025-01-31T12:45:10.102Z",
          "body": "I completely agree with this point."
        }
      ]
    }
  },

  "GET /api/articles": {
    "description": "Retrieves all articles with optional sorting, topic filtering, and pagination queries. By default, it sorts by 'created_at' in descending order, returns 10 articles per page, and allows you to navigate pages using the 'p' query.",
    "queries": [
      "sort_by (column name)",
      "order (asc or desc)",
      "topic (string)",
      "limit (number) - Limits the number of articles returned per page. Defaults to 10.",
      "p (number) - Specifies the page number to retrieve. Defaults to 1."
    ],
    "default": {
      "sort_by": "created_at",
      "order": "desc",
      "limit": 10,
      "p": 1
    },
    "exampleRequest": "/api/articles?sort_by=title&order=asc&topic=coding&limit=5&p=2",
    "exampleResponse": {
      "total_count": 25,
      "articles": [
        {
          "article_id": 6,
          "title": "Advanced Coding Techniques",
          "topic": "coding",
          "author": "johndoe",
          "created_at": "2025-02-01T10:00:00.000Z",
          "votes": 20,
          "comment_count": 3
        },
        {
          "article_id": 7,
          "title": "Why Coding is Fun",
          "topic": "coding",
          "author": "johndoe",
          "created_at": "2025-01-31T00:20:03.908Z",
          "votes": 15,
          "comment_count": 2
        }
      ]
    },
    "errorResponses": [
      {
        "status": 400,
        "msg": "Invalid sort query"
      },
      {
        "status": 400,
        "msg": "Invalid order query"
      },
      {
        "status": 400,
        "msg": "Bad request: limit must be a number"
      },
      {
        "status": 400,
        "msg": "Bad request: p must be a number"
      },
      {
        "status": 404,
        "msg": "Topic not found"
      }
    ]
  },

  "GET /api/articles/:article_id": {
    "description": "serves an article object based on the given article_id",
    "queries": ["author", "topic", "sort_by", "order"],
    "exampleResponse": {
      "articles": [
        {
          "author": "weegembump",
          "title": "Seafood substitutions are increasing",
          "article_id": 1,
          "body": "Text from the article..",
          "topic": "cooking",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "article_img_url": "image@imagee.com"
        }
      ]
    }
  },

  "DELETE /api/articles/:article_id": {
    "description": "Deletes the article object with the given article_id along with any associated comments. Responds with a 204 No Content status upon successful deletion.",
    "queries": [],
    "exampleResponse": {}
  },

  "GET /api/articles/:article_id/comments": {
    "description": "serves a comment object based on the given article_id",
    "queries": ["author", "topic", "sort_by", "order"],
    "exampleResponse": {
      "comments": [
        {
          "author": "weegembump",
          "article_id": 1,
          "body": "Text from the article..",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0
        }
      ]
    }
  },

  "POST /api/articles/:article_id/comments": {
    "description": "Adds a new comment to the specified article using the given article_id. The comment must include a username and body. Returns the newly added comment object.",
    "requests": {
      "body": {
        "username": "string (required)",
        "body": "string (required)"
      }
    },
    "queries": [],
    "exampleResponse": {
      "comment": {
        "comment_id": 19,
        "author": "lurker",
        "body": "I love IceCream",
        "article_id": 5,
        "created_at": "2025-01-30T00:20:03.908Z"
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the votes of a specific article by the given article_id.",
    "requests": {
      "body": {
        "inc_votes": "number (required)"
      }
    },
    "exampleRequest": {
      "inc_votes": 1
    },
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "A Great Article",
        "votes": 101,
        "author": "john_doe",
        "created_at": "2025-01-30T00:20:03.908Z"
      }
    }
  },
  "POST /api/articles": {
    "description": "Adds a new article to the database. Accepts an object containing author, title, body, topic, and optionally article_img_url (which defaults to a preset URL if not provided). Returns the newly created article with properties including article_id, votes (default 0), created_at timestamp, and comment_count (default 0).",
    "queries": [],
    "exampleRequestBody": {
      "author": "lurker",
      "title": "ChiTest",
      "topic": "mitch",
      "body": "I love IceCream",
      "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
    },
    "exampleResponse": {
      "article": {
        "article_id": 14,
        "author": "lurker",
        "title": "ChiTest",
        "body": "I love IceCream",
        "topic": "mitch",
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
        "votes": 0,
        "created_at": "2025-02-13T23:42:12.638Z",
        "comment_count": 0
      }
    }
  },

  "DELETE /api/comments/:comment_id": {
    "description": "Deletes a comment based on the given comment_id.",
    "queries": [],
    "exampleResponse": {
      "status": 204,
      "content": null
    },
    "errors": {
      "400": "Invalid comment ID",
      "404": "Comment not found"
    }
  },

  "PATCH /api/comments/:comment_id": {
    "description": "Updates the votes on a comment. Accepts an object in the form { inc_votes: newVote } in the request body, where newVote indicates how much to increment (or decrement) the comment's current votes. Responds with the updated comment.",
    "queries": [],
    "exampleRequestBody": { "inc_votes": 1 },
    "exampleResponse": {
      "comment": {
        "comment_id": 1,
        "author": "user",
        "body": "This is a sample comment.",
        "votes": 15,
        "created_at": "2020-01-01T00:00:00.000Z"
      }
    }
  },

  "GET /api/users": {
    "description": "Fetches a list of all users with their details.",
    "queries": [],
    "exampleResponse": {
      "users": [
        {
          "username": "butter_bridge",
          "name": "jonny",
          "avatar_url": "https://www.healthytherapies.com/wp-content/uploads/2016/06/Lime3.jpg"
        },
        {
          "username": "rogersop",
          "name": "paul",
          "avatar_url": "https://avatars2.githubusercontent.com/u/24394918?s=400&v=4"
        }
      ]
    }
  },
  "GET /api/users/:username": {
    "description": "Fetches a user by their username.",
    "queries": [],
    "exampleResponse": {
      "user": {
        "username": "tickle122",
        "name": "Tom Tickle",
        "avatar_url": "https://example.com/avatar.jpg"
      }
    }
  }
}
